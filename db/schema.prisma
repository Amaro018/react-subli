// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  email            String    @unique
  hashedPassword   String?
  role             String    @default("USER")
  isAdmin          Boolean   @default(false)
  isShopMode       Boolean   @default(false)
  isShopRegistered Boolean   @default(false)
  profileImage     String?
  tokens           Token[]
  sessions         Session[]

  personalInfo PersonalInfo?
  shop         Shop?
  cartItems    CartItem[] // Relation to CartItem
  rents        Rent[]
}

model Shop {
  id             Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Define `fields` and `references` here
  userId         Int       @unique
  shopName       String
  email          String
  street         String
  city           String
  region         String
  country        String
  zipCode        String
  contact        String
  status         String    @default("pending")
  description    String?
  imageProfile   String?
  imageBg        String?
  documentDTI    String?
  dtiStatus      String    @default("pending")
  documentPermit String?
  permitStatus   String    @default("pending")
  documentTax    String?
  taxStatus      String    @default("pending")
  linkFacebook   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  products       Product[]
}

model PersonalInfo {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String
  lastName    String
  middleName  String?
  birthDate   DateTime
  phoneNumber String?
  street      String
  city        String
  region      String
  country     String
  zipCode     String
  userId      Int      @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Product {
  id             Int              @id @default(autoincrement())
  shop           Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId         Int // Foreign key to Shop
  name           String
  description    String?
  status         String           @default("active")
  deliveryOption String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  variants       ProductVariant[] // Relationship with ProductVariant
  images         ProductImage[]
  category       Category         @relation("ProductCategories", fields: [categoryid], references: [id]) // Many-to-Many relationship with Category
  categoryid     Int
  cartItems      CartItem[]
}

model ProductVariant {
  id        Int        @id @default(autoincrement())
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int // Foreign key to Product
  size      String // Size (e.g., "S", "M", "L")
  color     Color      @relation(fields: [colorId], references: [id], onDelete: Cascade) // Relation with Color
  colorId   Int // Foreign key to Color
  quantity  Int // Quantity available for this size and color combination
  price     Float
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  rentItems RentItem[] // Relationship with RentItem
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int // Foreign key to Product
  url       String // URL of the image
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] @relation("ProductCategories")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  hexCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductVariant ProductVariant[]
}

model CartItem {
  id             Int            @id @default(autoincrement())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int // Foreign key to User
  product        Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      Int // Foreign key to Product
  variant        ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId      Int // Foreign key to ProductVariant
  quantity       Int            @default(1) // Quantity of the product in the cart
  deliveryMethod String
  startDate      DateTime? // Optional rental start date
  endDate        DateTime? // Optional rental end date
}

model Rent {
  id              Int        @id @default(autoincrement())
  userId          Int
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalPrice      Float
  status          String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  items           RentItem[] // Order contains multiple OrderItems
  deliveryAddress String
}

model RentItem {
  id               Int            @id @default(autoincrement())
  rentId           Int
  rent             Rent           @relation(fields: [rentId], references: [id], onDelete: Cascade)
  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  quantity         Int
  price            Float
  status           String
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}
