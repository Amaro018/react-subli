// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  email            String    @unique
  hashedPassword   String?
  role             String    @default("USER")
  isAdmin          Boolean   @default(false)
  isShopMode       Boolean   @default(false)
  isShopRegistered Boolean   @default(false)
  profileImage     String?
  tokens           Token[]
  sessions         Session[]

  personalInfo PersonalInfo?
  shop         Shop?
}

model Shop {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Define `fields` and `references` here
  userId         Int      @unique
  shopName       String
  tradeName      String
  email          String
  address        String
  contact        String
  status         String   @default("pending")
  bio            String?
  imageProfile   String?
  imageBg        String?
  documentDTI    String?
  dtiStatus      String   @default("pending")
  documentPermit String?
  permitStatus   String   @default("pending")
  documentTax    String?
  taxStatus      String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model PersonalInfo {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String
  lastName    String
  middleName  String?
  birthDate   DateTime
  phoneNumber String?
  street      String
  city        String
  region      String
  country     String
  zipCode     String
  userId      Int      @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
